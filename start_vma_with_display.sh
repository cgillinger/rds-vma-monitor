#!/bin/bash
#
# F√ñRB√ÑTTRAT VMA System med E-paper Display - ROBUST USB-hantering
# Fil: start_vma_with_display.sh (F√ñRB√ÑTTRAD VERSION)
# Placering: ~/rds_logger3/start_vma_with_display.sh
#
# F√ñRB√ÑTTRINGAR:
# - Robust USB-√•terst√§llning och cleanup
# - B√§ttre process-hantering och timing
# - F√∂rb√§ttrad felhantering
# - L√§ngre stabiliseringstider
#

set -e

# F√ñRB√ÑTTRADE f√§rgkoder f√∂r b√§ttre l√§sbarhet
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'      # L√§ttl√§st cyan ist√§llet f√∂r m√∂rk bl√•
WHITE='\033[1;37m'     # Vit f√∂r viktiga rubriker
NC='\033[0m'           # No Color

echo -e "${WHITE}üöÄ F√ñRB√ÑTTRAT VMA System med E-paper Display${NC}"
echo -e "${WHITE}==============================================${NC}"
echo -e "${CYAN}üîß MED: USB-reset, robust cleanup, b√§ttre timing${NC}"

# Projektmapp
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PROJECT_DIR"

# F√ñRB√ÑTTRAD: Process tracking f√∂r robust cleanup
VMA_PID=""
DISPLAY_PID=""

# NY: Robust cleanup-funktion
robust_cleanup() {
    echo ""
    echo -e "${YELLOW}üõë F√ñRB√ÑTTRAD CLEANUP - Stoppar system...${NC}"
    
    # STEG 1: Stoppa display monitor f√∂rst (l√§ser bara filer)
    if [ -n "$DISPLAY_PID" ] && kill -0 $DISPLAY_PID 2>/dev/null; then
        echo "üñ•Ô∏è Stoppar Display Monitor (PID: $DISPLAY_PID)"
        kill -TERM $DISPLAY_PID 2>/dev/null || true
        sleep 2
        # Force kill om n√∂dv√§ndigt
        if kill -0 $DISPLAY_PID 2>/dev/null; then
            kill -KILL $DISPLAY_PID 2>/dev/null || true
        fi
    fi
    
    # STEG 2: Stoppa VMA-system (signalerar till alla child-processer)
    if [ -n "$VMA_PID" ] && kill -0 $VMA_PID 2>/dev/null; then
        echo "üìª Stoppar VMA-system (PID: $VMA_PID)"
        kill -TERM $VMA_PID 2>/dev/null || true
        
        # F√ñRB√ÑTTRAT: L√§ngre v√§ntetid f√∂r graceful shutdown
        echo "‚è≥ V√§ntar p√• graceful shutdown (5 sekunder)..."
        sleep 5
        
        # Force kill om fortfarande kvar
        if kill -0 $VMA_PID 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è Force-stoppar VMA-system${NC}"
            kill -KILL $VMA_PID 2>/dev/null || true
            sleep 2
        fi
    fi
    
    # STEG 3: ROBUST cleanup av alla relaterade processer
    echo "üßπ ROBUST cleanup av alla VMA-processer..."
    
    # Specifik cleanup f√∂r RTL-SDR pipeline (i r√§tt ordning)
    pkill -f "audio_recorder.py" 2>/dev/null || true
    sleep 1
    pkill -f "redsea" 2>/dev/null || true
    sleep 1
    pkill -f "rtl_fm.*103300000" 2>/dev/null || true
    sleep 2  # Extra tid f√∂r USB-frig√∂ring
    
    # √ñvriga VMA-processer
    pkill -f "rds_logger.py" 2>/dev/null || true
    pkill -f "display_monitor.py" 2>/dev/null || true
    
    # STEG 4: USB-√•terst√§llning (fr√•n f√∂rb√§ttrade k√§rnskriptet)
    echo "üîß USB-√•terst√§llning..."
    
    # Hitta och reset RTL-SDR USB-enhet
    USB_DEVICE=$(lsusb | grep -i "rtl\|realtek" | head -1)
    if [[ -n "$USB_DEVICE" ]]; then
        BUS=$(echo "$USB_DEVICE" | awk '{print $2}')
        DEV=$(echo "$USB_DEVICE" | awk '{print $4}' | sed 's/://')
        
        if command -v usbreset &> /dev/null; then
            echo "üì° USB reset: Bus $BUS Device $DEV"
            sudo usbreset "/dev/bus/usb/$BUS/$DEV" 2>/dev/null || true
        fi
    fi
    
    # STEG 5: Rensa named pipes
    rm -f /tmp/vma_rds_data 2>/dev/null || true
    rm -f /tmp/vma_audio_control 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ F√ñRB√ÑTTRAD cleanup komplett${NC}"
    exit 0
}

# F√ñRB√ÑTTRAT: S√§tt upp robusta signal handlers
trap robust_cleanup SIGINT SIGTERM EXIT

# Kontrollera k√§rnkomponenter
if [ ! -f "start_vma_system.sh" ]; then
    echo -e "${RED}‚ùå Fel: start_vma_system.sh saknas${NC}"
    echo -e "${RED}   Detta skript kr√§ver det fungerande VMA-systemet${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Fungerande VMA-system hittat: start_vma_system.sh${NC}"

# Kontrollera VMA-systemfiler
required_files=(
    "rds_logger.py"
    "rds_detector.py" 
    "rds_parser.py"
    "audio_recorder.py"
    "transcriber.py"
    "config.py"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Fel: Obligatorisk fil saknas: $file${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Alla k√§rnfiler f√∂r VMA-system finns${NC}"

# Kontrollera display-moduler
display_files=(
    "display_monitor.py"
    "display_manager.py"
    "display_state_machine.py"
    "content_formatter.py"
    "screen_layouts.py"
    "display_config.py"
)

missing_display_files=()
for file in "${display_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_display_files+=("$file")
    fi
done

if [ ${#missing_display_files[@]} -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Display-moduler tillg√§ngliga${NC}"
    DISPLAY_AVAILABLE=true
else
    echo -e "${YELLOW}‚ö†Ô∏è Display-moduler saknas: ${missing_display_files[*]}${NC}"
    echo -e "${YELLOW}   VMA-system kommer k√∂ra utan display${NC}"
    DISPLAY_AVAILABLE=false
fi

# Testa display-moduler om tillg√§ngliga
if [ "$DISPLAY_AVAILABLE" = true ]; then
    if python3 -c "
import sys
sys.path.append('.')
try:
    from display_config import DISPLAY_SETTINGS
    from display_state_machine import DisplayStateMachine
    from content_formatter import ContentFormatter
    print('‚úÖ Display-moduler kan importeras')
except Exception as e:
    print(f'‚ùå Import-fel: {e}')
    sys.exit(1)
"; then
        echo -e "${GREEN}‚úÖ Display-moduler kan importeras${NC}"
    else
        echo -e "${RED}‚ùå Display-moduler har fel${NC}"
        DISPLAY_AVAILABLE=false
    fi
fi

# Kontrollera e-paper h√•rdvara om display √§r tillg√§ngligt
if [ "$DISPLAY_AVAILABLE" = true ]; then
    if python3 -c "
try:
    from waveshare_epd import epd4in26
    print('‚úÖ E-paper h√•rdvara tillg√§nglig')
except Exception as e:
    print(f'‚ö†Ô∏è E-paper h√•rdvara: {e}')
"; then
        echo -e "${GREEN}‚úÖ E-paper h√•rdvara tillg√§nglig${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è E-paper h√•rdvara ej tillg√§nglig (k√∂r √§nd√•)${NC}"
    fi
fi

echo ""
echo -e "${CYAN}F√ñRB√ÑTTRAD KONFIGURATION:${NC}"
echo -e "${CYAN}=========================${NC}"
echo "üîß VMA-system: F√ñRB√ÑTTRAD start_vma_system.sh (USB-reset + robust cleanup)"
if [ "$DISPLAY_AVAILABLE" = true ]; then
    echo "üñ•Ô∏è Display: TILLG√ÑNGLIGT (hardware)"
else
    echo -e "${YELLOW}üñ•Ô∏è Display: INTE TILLG√ÑNGLIGT${NC}"
fi
echo "üì° Pipeline: Samma fungerande pipeline med robust hantering"
echo "üîó Integration: Display l√§ser loggfiler (ingen pipeline-√§ndring)"
echo "üîß F√∂rb√§ttringar: USB-reset, l√§ngre timers, b√§ttre cleanup"
echo ""

# AUTOMATISK START - INGEN PROMPT
echo "üìÇ Skapar logs-katalog..."
echo ""

# Skapa logs-katalog
mkdir -p logs
mkdir -p logs/audio
mkdir -p logs/transcriptions
mkdir -p logs/screen 2>/dev/null || true

# F√ñRB√ÑTTRAT: Starta VMA-system med b√§ttre verifiering
echo -e "${GREEN}üöÄ STARTAR F√ñRB√ÑTTRAT VMA-SYSTEM${NC}"
echo -e "${GREEN}===================================${NC}"
echo "Startar det f√∂rb√§ttrade systemet: ./start_vma_system.sh"

# Starta VMA-systemet i bakgrunden
nohup ./start_vma_system.sh > /dev/null 2>&1 &
VMA_PID=$!

# F√ñRB√ÑTTRAT: L√§ngre stabiliseringstid f√∂r VMA-system
echo "‚è≥ V√§ntar p√• VMA-system stabilisering (8 sekunder)..."
sleep 8

# ROBUST: Kontrollera att VMA-systemet verkligen startade
if kill -0 $VMA_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ VMA-system k√∂r (PID: $VMA_PID)${NC}"
    
    # Extra verifiering: kolla att RTL-processer startade
    if pgrep -f "rtl_fm.*103300000" &>/dev/null; then
        echo -e "${GREEN}‚úÖ RTL-FM process detekterad${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è RTL-FM process inte detekterad √§nnu (kan ta l√§ngre tid)${NC}"
    fi
    
    if pgrep -f "redsea" &>/dev/null; then
        echo -e "${GREEN}‚úÖ Redsea process detekterad${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Redsea process inte detekterad √§nnu${NC}"
    fi
    
else
    echo -e "${RED}‚ùå VMA-system kunde inte startas${NC}"
    echo -e "${RED}üîß Kolla systemloggar: logs/system_$(date +%Y%m%d).log${NC}"
    exit 1
fi

# Starta display-monitor om tillg√§ngligt
if [ "$DISPLAY_AVAILABLE" = true ]; then
    echo ""
    echo -e "${CYAN}üñ•Ô∏è STARTAR DISPLAY-MONITOR (SEPARAT)${NC}"
    echo -e "${CYAN}====================================${NC}"
    echo "V√§ntar p√• att VMA-systemet ska skapa loggar..."
    
    # F√ñRB√ÑTTRAT: L√§ngre timeout f√∂r logs-katalog
    timeout=45
    while [ $timeout -gt 0 ]; do
        if [ -d "logs" ] && [ -f "logs/system_$(date +%Y%m%d).log" ]; then
            echo -e "${GREEN}‚úÖ Logs-katalog och systemlogg skapad av VMA-system${NC}"
            break
        fi
        sleep 1
        ((timeout--))
    done
    
    if [ $timeout -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Timeout: Systemlogg inte skapad, startar display √§nd√•${NC}"
    fi
    
    echo "Startar Display Monitor (l√§ser loggfiler)..."
    
    # Starta display monitor i bakgrunden
    nohup python3 display_monitor.py > /dev/null 2>&1 &
    DISPLAY_PID=$!
    
    # F√ñRB√ÑTTRAT: L√§ngre verifiering av display-monitor
    echo "‚è≥ V√§ntar p√• Display Monitor stabilisering (5 sekunder)..."
    sleep 5
    
    # Kontrollera att display-monitor startade
    if kill -0 $DISPLAY_PID 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Display Monitor startad (PID: $DISPLAY_PID)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Display Monitor kunde inte startas (VMA-system forts√§tter)${NC}"
        DISPLAY_PID=""
    fi
else
    echo ""
    echo -e "${YELLOW}Display inte tillg√§ngligt - endast VMA-system k√∂rs${NC}"
    DISPLAY_PID=""
fi

echo ""
echo -e "${WHITE}üéØ F√ñRB√ÑTTRAT SYSTEM AKTIVT${NC}"
echo -e "${WHITE}============================${NC}"
echo "üìª VMA-system: PID $VMA_PID (F√ñRB√ÑTTRAD start_vma_system.sh)"
if [ -n "$DISPLAY_PID" ]; then
    echo "üñ•Ô∏è Display Monitor: PID $DISPLAY_PID (l√§ser loggfiler)"
fi
echo ""
echo "üîß F√ñRB√ÑTTRINGAR AKTIVA:"
echo "   ‚úÖ USB-reset vid start och stopp"
echo "   ‚úÖ Robust process cleanup (korrekt ordning)"
echo "   ‚úÖ L√§ngre stabiliseringstider (8s VMA, 5s Display)"
echo "   ‚úÖ RTL-SDR ready verification"
echo "   ‚úÖ Named pipe collision handling"
echo "   ‚úÖ F√∂rb√§ttrad felhantering"
echo ""
if [ -n "$DISPLAY_PID" ]; then
    echo "üñ•Ô∏è Display l√§ser bara loggfiler - r√∂r inte pipelines"
fi
echo ""
echo -e "${YELLOW}Tryck Ctrl+C f√∂r att stoppa HELA systemet${NC}"
echo ""

# V√§nta p√• signal
echo -e "${GREEN}‚úÖ F√ñRB√ÑTTRAD AUTOMATISK START SLUTF√ñRD${NC}"
echo "üì° RDS-detektion aktiv, v√§ntar p√• trafikmeddelanden och VMA"
if [ -n "$DISPLAY_PID" ]; then
    echo "üñ•Ô∏è Display visar startup-sk√§rm tills f√∂rsta event"
fi
echo "üîß Systemet har nu robust USB-hantering och cleanup"

# F√ñRB√ÑTTRAD: Huvudloop med b√§ttre process-monitoring
while true; do
    # ROBUST: Kontrollera att VMA-systemet fortfarande k√∂rs
    if ! kill -0 $VMA_PID 2>/dev/null; then
        echo -e "${RED}‚ùå VMA-system har stoppat ov√§ntat${NC}"
        echo -e "${RED}üîß Trolig orsak: USB-gr√§nssnittsproblem${NC}"
        echo -e "${RED}üìã Kolla loggar: logs/system_$(date +%Y%m%d).log${NC}"
        break
    fi
    
    # Kontrollera att kritiska processer fortfarande k√∂rs
    if ! pgrep -f "rtl_fm.*103300000" &>/dev/null; then
        echo -e "${RED}‚ùå RTL-FM process har d√∂tt - USB-problem${NC}"
        break
    fi
    
    if [ -n "$DISPLAY_PID" ] && ! kill -0 $DISPLAY_PID 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Display Monitor har stoppat${NC}"
        DISPLAY_PID=""
    fi
    
    # Status-update var 30:e sekund (oftare √§n tidigare)
    sleep 30
done

# Om vi kommer hit har n√•got g√•tt fel
echo -e "${RED}üí• Systemet har stoppat ov√§ntat - k√∂r robust cleanup${NC}"
robust_cleanup